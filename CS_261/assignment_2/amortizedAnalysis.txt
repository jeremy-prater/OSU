1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts
out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As
N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

Add	Capacity	O(n)
1	8	        1
2	8       	1
3	8	        1
4	8	        1
5	8	        1
6	8	        1
7	8	        1
8	8	        1
9	16      	10
10	16	        1
11	16	        1
12	16	        1
13	16	        1
14	16	        1
15	16	        1
16	16	        1
17	32	        18
18	32	        1
19	32	        1
20	32	        1
21	32      	1
22	32	        1
23	32      	1
24	32	        1
25	32	        1
26	32	        1
27	32	        1
28	32	        1
29	32	        1
30	32	        1
31	32	        1
32	32	        1

Total unit Costs: 57
Big O: O(1)+



2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out
at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic
array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?

Add	Capacity	O(n)
1	8       	1
2	8	        1
3	8	        1
4	8	        1
5	8	        1
6	8	        1
7	8	        1
8	8	        1
9	10	        9
10	10	        1
11	12	        12
12	12	        1
13	14	        14
14	14	        1
15	16	        16
16	16	        1
17	18	        18
18	18      	1
19	20	        20
20	20      	1
21	22      	22
22	22      	1
23	24      	24
24	24      	1
25	26      	26
26	26  	  	1
27	28      	28
28	28      	1
29	30      	30
30	30      	1
31	32      	32
32	32	        1

Total unit Costs: 271
Big O: O(N/2)


3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by
half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor
performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the
initial capacity of the array is N/2.)

Initial capacity is N/2 (4)

N	Capacity	Size	Action	
8	4		4	Initial	
8	8		5	1	Push
8	4		4	-1	Pop
8	4		3	-1	Pop
8	4		4	1	Push

By changing the resizing algoritm for shrinking to N/4 instead of N/2, that would prevent excessive reallocations.