Microsoft (R) Macro Assembler Version 14.00.24210.0	    09/26/16 22:24:04
(Elementary Arithemic     (Project01.asm		     Page 1 - 1


				TITLE Elementary Arithemic     (Project01.asm)

				; Author: Jeremy Prater
				; Course / Project ID : CS-271 / Project 01                Date: 9/21/2016
				; Description:  This program will introduce the programmer, and project name,
				;               get input from user, calculate output values, print results,
				;               display exit message.
				;
				; Write and test a MASM program to perform the following tasks:
				; 1. Display your name and program title on the output screen.
				; 2. Display instructions for the user.
				; 3. Prompt the user to enter two numbers.
				; 4. Calculate the sum, difference, product, (integer) quotient and remainder of the numbers.
				; 5. Display a terminating message. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 20 20 20 20 20	messageTitle       BYTE  "                     Elementary Arithmetc            by       Jeremy Prater" ,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 45 6C 65 6D
	   65 6E 74 61 72
	   79 20 41 72 69
	   74 68 6D 65 74
	   63 20 20 20 20
	   20 20 20 20 20
	   20 20 20 62 79
	   20 20 20 20 20
	   20 20 4A 65 72
	   65 6D 79 20 50
	   72 61 74 65 72
	   00
 0000004C 45 6E 74 65 72	messageInstruction BYTE  "Enter 2 numbers, and I'll show you the sum, difference, product, quotient, and remainder." ,0
	   20 32 20 6E 75
	   6D 62 65 72 73
	   2C 20 61 6E 64
	   20 49 27 6C 6C
	   20 73 68 6F 77
	   20 79 6F 75 20
	   74 68 65 20 73
	   75 6D 2C 20 64
	   69 66 66 65 72
	   65 6E 63 65 2C
	   20 70 72 6F 64
	   75 63 74 2C 20
	   71 75 6F 74 69
	   65 6E 74 2C 20
	   61 6E 64 20 72
	   65 6D 61 69 6E
	   64 65 72 2E 00
 000000A6 45 6E 74 65 72	messageFirstNum    BYTE  "Enter First Number (q to quit): " ,0
	   20 46 69 72 73
	   74 20 4E 75 6D
	   62 65 72 20 28
	   71 20 74 6F 20
	   71 75 69 74 29
	   3A 20 00
 000000C7 45 6E 74 65 72	messageSecondNum   BYTE  "Enter Second Number: " ,0
	   20 53 65 63 6F
	   6E 64 20 4E 75
	   6D 62 65 72 3A
	   20 00
 000000DD 45 52 52 4F 52	messageDivideByZ   BYTE  "ERROR: You can not : -- DIVIDE BY ZERO --" ,0
	   3A 20 59 6F 75
	   20 63 61 6E 20
	   6E 6F 74 20 3A
	   20 2D 2D 20 44
	   49 56 49 44 45
	   20 42 59 20 5A
	   45 52 4F 20 2D
	   2D 00
 00000107 78 38 36 20 41	messageExit        BYTE  "x86 Assembly is pretty cool, eh? Bye!" ,0
	   73 73 65 6D 62
	   6C 79 20 69 73
	   20 70 72 65 74
	   74 79 20 63 6F
	   6F 6C 2C 20 65
	   68 3F 20 42 79
	   65 21 00

 0000012D 54 68 65 20 73	messageLessthan    BYTE  "The second input must be less than or equal to the first!!" ,0
	   65 63 6F 6E 64
	   20 69 6E 70 75
	   74 20 6D 75 73
	   74 20 62 65 20
	   6C 65 73 73 20
	   74 68 61 6E 20
	   6F 72 20 65 71
	   75 61 6C 20 74
	   6F 20 74 68 65
	   20 66 69 72 73
	   74 21 21 00

 00000168 2A 2A 20 45 43	messageEC1         BYTE  "** EC1: Repeat until the user chooses to quit" ,0
	   31 3A 20 52 65
	   70 65 61 74 20
	   75 6E 74 69 6C
	   20 74 68 65 20
	   75 73 65 72 20
	   63 68 6F 6F 73
	   65 73 20 74 6F
	   20 71 75 69 74
	   00
 00000196 2A 2A 20 45 43	messageEC2         BYTE  "** EC2: Validate the second number to be less than the first" ,0
	   32 3A 20 56 61
	   6C 69 64 61 74
	   65 20 74 68 65
	   20 73 65 63 6F
	   6E 64 20 6E 75
	   6D 62 65 72 20
	   74 6F 20 62 65
	   20 6C 65 73 73
	   20 74 68 61 6E
	   20 74 68 65 20
	   66 69 72 73 74
	   00
 000001D3 2A 2A 20 45 43	messageEC3         BYTE  "** EC3: Calculate and display the quotient as a floating point number, rounded to nearest .001" ,0
	   33 3A 20 43 61
	   6C 63 75 6C 61
	   74 65 20 61 6E
	   64 20 64 69 73
	   70 6C 61 79 20
	   74 68 65 20 71
	   75 6F 74 69 65
	   6E 74 20 61 73
	   20 61 20 66 6C
	   6F 61 74 69 6E
	   67 20 70 6F 69
	   6E 74 20 6E 75
	   6D 62 65 72 2C
	   20 72 6F 75 6E
	   64 65 64 20 74
	   6F 20 6E 65 61
	   72 65 73 74 20
	   2E 30 30 31 00
 00000232 2A 2A 20 45 43	messageEC4         BYTE  "** EC4: Catch divide by zero :)" ,0
	   34 3A 20 43 61
	   74 63 68 20 64
	   69 76 69 64 65
	   20 62 79 20 7A
	   65 72 6F 20 3A
	   29 00

 00000252 20 2B 20 00		mathAdd            BYTE  " + " ,0
 00000256 20 2D 20 00		mathSub            BYTE  " - " ,0
 0000025A 20 2A 20 00		mathMul            BYTE  " * " ,0
 0000025E 20 2F 20 00		mathDiv            BYTE  " / " ,0
 00000262 20 3D 20 00		mathEqual          BYTE  " = " ,0
 00000266 20 72 65 6D 61	mathRemainder      BYTE  " remainder " ,0
	   69 6E 64 65 72
	   20 00

 00000272 00000000		inputFirstNum      DWORD ?       ; first integer entered by user
 00000276 00000000		inputSecondNum     DWORD ?       ; second integer entered by user

 0000027A 00000000		storageAddResult   DWORD ?       ; Memory to store the add result
 0000027E 00000000		storageSubResult   DWORD ?       ; Memory to store the sub result
 00000282 00000000		storageMulResult   DWORD ?       ; Memory to store the mul result
 00000286 00000000		storageDivResult   DWORD ?       ; Memory to store the div result

 0000028A  0000001E [		primaryInput       BYTE 30 DUP (?); Memory to check if we are quitting
	    00
	   ]
 000002A8 0000001E		primaryInputLength DWORD ($-primaryInput)

 000002AC 03E8			FloatRounder       WORD 1000     ; This is actually 1/1000 = .001. Used for float rounding

 00000000			.code
 00000000			main PROC

				;Main procedure requirements
				; introduction
 00000000  BA 00000000 R		mov		edx, OFFSET messageTitle
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	CrLf
 0000000F  E8 00000000 E		call	CrLf

				; Display extra credit information
 00000014  BA 00000168 R		mov		edx, OFFSET messageEC1
 00000019  E8 00000000 E		call	WriteString
 0000001E  E8 00000000 E		call	CrLf

 00000023  BA 00000196 R		mov		edx, OFFSET messageEC2
 00000028  E8 00000000 E		call	WriteString
 0000002D  E8 00000000 E		call	CrLf

 00000032  BA 000001D3 R		mov		edx, OFFSET messageEC3
 00000037  E8 00000000 E		call	WriteString
 0000003C  E8 00000000 E		call	CrLf

 00000041  BA 00000232 R		mov		edx, OFFSET messageEC4
 00000046  E8 00000000 E		call	WriteString
 0000004B  E8 00000000 E		call	CrLf
 00000050  E8 00000000 E		call	CrLf

				; Main loop
 00000055			MAINLOOP:

				; get the data
 00000055  BA 0000004C R		mov		edx, OFFSET messageInstruction
 0000005A  E8 00000000 E		call	WriteString
 0000005F  E8 00000000 E		call	CrLf

 00000064  BA 000000A6 R		mov		edx, OFFSET messageFirstNum
 00000069  E8 00000000 E		call	WriteString

 0000006E  BA 0000028A R		mov		edx, OFFSET primaryInput
 00000073  8B 0D 000002A8 R		mov		ecx, primaryInputLength
 00000079  E8 00000000 E		call	ReadString

				; Check if we should exit now
 0000007E  A0 0000028A R	    MOV     AL, primaryInput
 00000083  3C 71			CMP     AL, 'q'
 00000085  0F 84 000001DF		JE      USEREXIT

				; Continue processing

					; Convert string to integer!
 0000008B  BA 0000028A R		mov		edx, OFFSET primaryInput
 00000090  8B 0D 000002A8 R		mov		ecx, primaryInputLength
 00000096  E8 00000000 E		call    ParseInteger32
 0000009B  A3 00000272 R		mov		inputFirstNum, eax

					; Continue with user data
 000000A0  BA 000000C7 R		mov		edx, OFFSET messageSecondNum
 000000A5  E8 00000000 E		call	WriteString

 000000AA  E8 00000000 E		call	ReadInt
 000000AF  A3 00000276 R		mov		inputSecondNum, eax

				; Check if inputSecondNum < inputFirstNum
					; Second num is already in EAX
 000000B4  3B 05 00000272 R		CMP     EAX, inputFirstNum
 000000BA  7E 16			JLE     INPUTPASSED     ; User input is ok, jump to calculations

					; Tell user to fix input and try again!
 000000BC  BA 0000012D R		mov		edx, OFFSET messageLessthan
 000000C1  E8 00000000 E		call	WriteString
 000000C6  E8 00000000 E		call	CrLf
 000000CB  E8 00000000 E		call	CrLf
 000000D0  EB 83			JMP MAINLOOP

				; calculate the required values
 000000D2			INPUTPASSED:	
 000000D2  A1 00000272 R		mov		eax, inputFirstNum
 000000D7  03 05 00000276 R		add     eax, inputSecondNum
 000000DD  A3 0000027A R		mov     storageAddResult, eax

 000000E2  A1 00000272 R		mov		eax, inputFirstNum
 000000E7  2B 05 00000276 R		sub     eax, inputSecondNum
 000000ED  A3 0000027E R		mov     storageSubResult, eax

 000000F2  A1 00000272 R		mov		eax, inputFirstNum
 000000F7  F7 25 00000276 R		mul     inputSecondNum
 000000FD  A3 00000282 R		mov     storageMulResult, eax

 00000102  A1 00000272 R		mov		eax, inputFirstNum
 00000107  83 3D 00000276 R		cmp     inputSecondNum ,0    ; Check operand 2 for zero - prevent division by zero error
	   00
 0000010E  74 25			je      DIV0DETECTED
					
 00000110  F7 35 00000276 R		div     inputSecondNum       ; Preform integer division
 00000116  A3 00000286 R		mov     storageDivResult, eax

					; Preform floating point division
 0000011B  DB 05 00000272 R		fild    inputFirstNum    ; Load first operand into ST(0) Convert DWORD->REAL
 00000121  DA 35 00000276 R		fidiv   inputSecondNum   ; Loadn and divide first/second and store result in ST(0)
 00000127  DE 0D 000002AC R		fimul   FloatRounder     ; Multiply ST(0) by 1000
 0000012D  D9 FC			frndint
 0000012F  DE 35 000002AC R		fidiv   FloatRounder     ; Divide ST(0) by 1000 (round to .001)

 00000135			DIV0DETECTED:
				; display the results
 00000135  A1 00000272 R		mov     eax, inputFirstNum
 0000013A  E8 00000000 E		call    WriteInt
 0000013F  BA 00000252 R		mov		edx, OFFSET mathAdd
 00000144  E8 00000000 E		call	WriteString
 00000149  A1 00000276 R		mov     eax, inputSecondNum
 0000014E  E8 00000000 E		call    WriteInt
 00000153  BA 00000262 R		mov		edx, OFFSET mathEqual
 00000158  E8 00000000 E		call	WriteString
 0000015D  A1 0000027A R		mov     eax, storageAddResult
 00000162  E8 00000000 E		call    WriteInt
 00000167  E8 00000000 E		call    CrLf

 0000016C  A1 00000272 R		mov     eax, inputFirstNum
 00000171  E8 00000000 E		call    WriteInt
 00000176  BA 00000256 R		mov		edx, OFFSET mathSub
 0000017B  E8 00000000 E		call	WriteString
 00000180  A1 00000276 R		mov     eax, inputSecondNum
 00000185  E8 00000000 E		call    WriteInt
 0000018A  BA 00000262 R		mov		edx, OFFSET mathEqual
 0000018F  E8 00000000 E		call	WriteString
 00000194  A1 0000027E R		mov     eax, storageSubResult
 00000199  E8 00000000 E		call    WriteInt
 0000019E  E8 00000000 E		call    CrLf

 000001A3  A1 00000272 R		mov     eax, inputFirstNum
 000001A8  E8 00000000 E		call    WriteInt
 000001AD  BA 0000025A R		mov		edx, OFFSET mathMul
 000001B2  E8 00000000 E		call	WriteString
 000001B7  A1 00000276 R		mov     eax, inputSecondNum
 000001BC  E8 00000000 E		call    WriteInt
 000001C1  BA 00000262 R		mov		edx, OFFSET mathEqual
 000001C6  E8 00000000 E		call	WriteString
 000001CB  A1 00000282 R		mov     eax, storageMulResult
 000001D0  E8 00000000 E		call    WriteInt
 000001D5  E8 00000000 E		call    CrLf

					; Check for zero in second operand
 000001DA  83 3D 00000276 R		CMP    inputSecondNum, 0
	   00
 000001E1  75 19			JNE    SHOWDIVISON  ; The second operand is not zero!

 000001E3  BA 000000DD R		mov		edx, OFFSET messageDivideByZ     ; Print dov/0 error!!
 000001E8  E8 00000000 E		call	WriteString
 000001ED  E8 00000000 E		call	CrLf
 000001F2  E8 00000000 E		call	CrLf

 000001F7  E9 FFFFFE59			JMP    MAINLOOP

 000001FC			SHOWDIVISON:
 000001FC  A1 00000272 R		mov     eax, inputFirstNum
 00000201  E8 00000000 E		call    WriteInt
 00000206  BA 0000025E R		mov		edx, OFFSET mathDiv
 0000020B  E8 00000000 E		call	WriteString
 00000210  A1 00000276 R		mov     eax, inputSecondNum
 00000215  E8 00000000 E		call    WriteInt
 0000021A  BA 00000262 R		mov		edx, OFFSET mathEqual
 0000021F  E8 00000000 E		call	WriteString
 00000224  A1 00000286 R		mov     eax, storageDivResult
 00000229  E8 00000000 E		call    WriteInt
 0000022E  E8 00000000 E		call    CrLf

 00000233  A1 00000272 R		mov     eax, inputFirstNum
 00000238  E8 00000000 E		call    WriteInt
 0000023D  BA 0000025E R		mov		edx, OFFSET mathDiv
 00000242  E8 00000000 E		call	WriteString
 00000247  A1 00000276 R		mov     eax, inputSecondNum
 0000024C  E8 00000000 E		call    WriteInt
 00000251  BA 00000262 R		mov		edx, OFFSET mathEqual
 00000256  E8 00000000 E		call	WriteString
 0000025B  E8 00000000 E		call    WriteFloat       ; The result is already in ST(0)
 00000260  E8 00000000 E		call    CrLf


				; return to main loop (this should be a procedure!)
 00000265  E9 FFFFFDEB			JMP     MAINLOOP

 0000026A			USEREXIT:
				; say goodbye 
 0000026A  BA 00000107 R		mov		edx, OFFSET messageExit
 0000026F  E8 00000000 E		call	WriteString
 00000274  E8 00000000 E		call	CrLf
 00000279  E8 00000000 E		call	CrLf

					exit	; exit to operating system
 0000027E  6A 00	   *	    push   +000000000h
 00000280  E8 00000000 E   *	    call   ExitProcess
 00000285			main ENDP

				END main


Microsoft (R) Macro Assembler Version 14.00.24210.0	    09/26/16 22:24:04
(Elementary Arithemic     (Project01.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002AE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000285 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000285 Public STDCALL
  MAINLOOP . . . . . . . . . . .	L Near	 00000055 _TEXT	
  INPUTPASSED  . . . . . . . . .	L Near	 000000D2 _TEXT	
  DIV0DETECTED . . . . . . . . .	L Near	 00000135 _TEXT	
  SHOWDIVISON  . . . . . . . . .	L Near	 000001FC _TEXT	
  USEREXIT . . . . . . . . . . .	L Near	 0000026A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FloatRounder . . . . . . . . . .	Word	 000002AC _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputFirstNum  . . . . . . . . .	DWord	 00000272 _DATA	
inputSecondNum . . . . . . . . .	DWord	 00000276 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mathAdd  . . . . . . . . . . . .	Byte	 00000252 _DATA	
mathDiv  . . . . . . . . . . . .	Byte	 0000025E _DATA	
mathEqual  . . . . . . . . . . .	Byte	 00000262 _DATA	
mathMul  . . . . . . . . . . . .	Byte	 0000025A _DATA	
mathRemainder  . . . . . . . . .	Byte	 00000266 _DATA	
mathSub  . . . . . . . . . . . .	Byte	 00000256 _DATA	
messageDivideByZ . . . . . . . .	Byte	 000000DD _DATA	
messageEC1 . . . . . . . . . . .	Byte	 00000168 _DATA	
messageEC2 . . . . . . . . . . .	Byte	 00000196 _DATA	
messageEC3 . . . . . . . . . . .	Byte	 000001D3 _DATA	
messageEC4 . . . . . . . . . . .	Byte	 00000232 _DATA	
messageExit  . . . . . . . . . .	Byte	 00000107 _DATA	
messageFirstNum  . . . . . . . .	Byte	 000000A6 _DATA	
messageInstruction . . . . . . .	Byte	 0000004C _DATA	
messageLessthan  . . . . . . . .	Byte	 0000012D _DATA	
messageSecondNum . . . . . . . .	Byte	 000000C7 _DATA	
messageTitle . . . . . . . . . .	Byte	 00000000 _DATA	
primaryInputLength . . . . . . .	DWord	 000002A8 _DATA	
primaryInput . . . . . . . . . .	Byte	 0000028A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
storageAddResult . . . . . . . .	DWord	 0000027A _DATA	
storageDivResult . . . . . . . .	DWord	 00000286 _DATA	
storageMulResult . . . . . . . .	DWord	 00000282 _DATA	
storageSubResult . . . . . . . .	DWord	 0000027E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
