Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/06/16 13:45:29
!Composite Numbers (Project04.asm			     Page 1 - 1


				TITLE Composite Numbers (Project04.asm)

				; Author: Jeremy Prater
				; Course / Project ID : CS-271 / Project 04                Date: 11/06/2016
				; Description:  Write a program to calculate composite numbers. First, the user is
				; instructed to enter the number of composites to be displayed, and is prompted to
				; enter an integer in the range [1,400]
				;
				; The range has been extended to [1, 300000] allow for pausing of the printed output
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 20 20 20 20 20	messageTitle        BYTE  "            Composite Numbers         by       Jeremy Prater", 0
	   20 20 20 20 20
	   20 20 43 6F 6D
	   70 6F 73 69 74
	   65 20 4E 75 6D
	   62 65 72 73 20
	   20 20 20 20 20
	   20 20 20 62 79
	   20 20 20 20 20
	   20 20 4A 65 72
	   65 6D 79 20 50
	   72 61 74 65 72
	   00
 0000003D 2A 2A 20 45 43	messageEC1          BYTE  "** EC1: Align output columns." ,0
	   31 3A 20 41 6C
	   69 67 6E 20 6F
	   75 74 70 75 74
	   20 63 6F 6C 75
	   6D 6E 73 2E 00
 0000005B 2A 2A 20 45 43	messageEC2          BYTE  "** EC2: Display more composites, but show them one page at a time.", 0
	   32 3A 20 44 69
	   73 70 6C 61 79
	   20 6D 6F 72 65
	   20 63 6F 6D 70
	   6F 73 69 74 65
	   73 2C 20 62 75
	   74 20 73 68 6F
	   77 20 74 68 65
	   6D 20 6F 6E 65
	   20 70 61 67 65
	   20 61 74 20 61
	   20 74 69 6D 65
	   2E 00

 0000009E 57 68 61 74 20	messageEnterName    BYTE  "What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 000000B2 48 65 6C 6C 6F	messageHello        BYTE  "Hello, ", 0
	   2C 20 00

 000000BA 45 6E 74 65 72	messageInstruction1 BYTE  "Enter the number of composite numbers you would like to see.", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   63 6F 6D 70 6F
	   73 69 74 65 20
	   6E 75 6D 62 65
	   72 73 20 79 6F
	   75 20 77 6F 75
	   6C 64 20 6C 69
	   6B 65 20 74 6F
	   20 73 65 65 2E
	   00
 000000F7 54 68 65 20 6D	messageInstruction2 BYTE  "The maximum number of composites to display is 300000.", 0
	   61 78 69 6D 75
	   6D 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 63 6F 6D
	   70 6F 73 69 74
	   65 73 20 74 6F
	   20 64 69 73 70
	   6C 61 79 20 69
	   73 20 33 30 30
	   30 30 30 2E 00

 0000012E 45 6E 74 65 72	messageGetNumber    BYTE  "Enter the number number of composites to display [1, 300000] : ", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 63 6F 6D
	   70 6F 73 69 74
	   65 73 20 74 6F
	   20 64 69 73 70
	   6C 61 79 20 5B
	   31 2C 20 33 30
	   30 30 30 30 5D
	   20 3A 20 00
 0000016E 20 69 73 20 6F	messageRangeError   BYTE  " is out of range. Try again.", 0
	   75 74 20 6F 66
	   20 72 61 6E 67
	   65 2E 20 54 72
	   79 20 61 67 61
	   69 6E 2E 00

 0000018B 41 73 73 65 6D	messageExit1        BYTE  "Assembly language is pretty powerful.", 0
	   62 6C 79 20 6C
	   61 6E 67 75 61
	   67 65 20 69 73
	   20 70 72 65 74
	   74 79 20 70 6F
	   77 65 72 66 75
	   6C 2E 00
 000001B1 49 20 73 68 6F	messageExit2        BYTE  "I should make a real-time thread scheduler!" ,0
	   75 6C 64 20 6D
	   61 6B 65 20 61
	   20 72 65 61 6C
	   2D 74 69 6D 65
	   20 74 68 72 65
	   61 64 20 73 63
	   68 65 64 75 6C
	   65 72 21 00
 000001DD 47 6F 6F 64 20	messageExit3        BYTE  "Good bye ", 0
	   62 79 65 20 00
 000001E7 21 00			messageExit4        BYTE  "!" ,0

 000001E9 20 00			messageSpace        BYTE  " " ,0

 000001EB  0000001E [		storageName         BYTE 30 DUP (?) ; Memory to store user name
	    00
	   ]
 00000209 0000001E		storageNameLength   DWORD ($-storageName)

 0000020D 000493E0		maxUserInput        DWORD 300000
 00000211 00000000		columnNumber        DWORD 0
 00000215 00			rowNumber           BYTE  0
 00000216 00000000		cNumbersFound       DWORD 0

 00000000			.code

				;--------------------------------------------------------
				;
				; Display the introduction
				;
				;--------------------------------------------------------

 00000000			displayIntro PROC
				; introduction
 00000000  BA 00000000 R		mov		edx, OFFSET messageTitle
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	CrLf
 0000000F  E8 00000000 E		call	CrLf

				; Display extra credit information
 00000014  BA 0000003D R		mov		edx, OFFSET messageEC1
 00000019  E8 00000000 E		call	WriteString
 0000001E  E8 00000000 E		call	CrLf
 00000023  BA 0000005B R		mov	edx, OFFSET messageEC2
 00000028  E8 00000000 E		call	WriteString
 0000002D  E8 00000000 E		call	CrLf
 00000032  E8 00000000 E		call	CrLf
 00000037  C3				ret
 00000038			displayIntro ENDP

				;--------------------------------------------------------
				;
				; Get and print the user name
				;
				;--------------------------------------------------------

 00000038			getUsername PROC
				; Get the user name
 00000038  BA 0000009E R		mov		edx, OFFSET messageEnterName
 0000003D  E8 00000000 E		call	WriteString
 00000042  BA 000001EB R		mov		edx, OFFSET storageName
 00000047  8B 0D 00000209 R		mov		ecx, storageNameLength
 0000004D  E8 00000000 E		call	ReadString

				; Display the username
 00000052  BA 000000B2 R		mov     edx, OFFSET messageHello
 00000057  E8 00000000 E		call    WriteString
 0000005C  BA 000001EB R		mov     edx, OFFSET storageName
 00000061  E8 00000000 E		call    WriteString
 00000066  E8 00000000 E		call    CrLf

 0000006B  C3				ret
 0000006C			getUsername ENDP

				;--------------------------------------------------------
				;
				; Display the instructions for the application
				;
				;--------------------------------------------------------

 0000006C			displayInstructions PROC
					; Display instructions

 0000006C  BA 000000BA R	    mov     edx, OFFSET messageInstruction1
 00000071  E8 00000000 E		call    WriteString
 00000076  E8 00000000 E		call    CrLf

 0000007B  BA 000000F7 R	    mov     edx, OFFSET messageInstruction2
 00000080  E8 00000000 E		call    WriteString
 00000085  E8 00000000 E		call    CrLf

 0000008A  C3				ret
 0000008B			displayInstructions ENDP

				;--------------------------------------------------------
				;
				; Get user input
				;
				;--------------------------------------------------------

 0000008B			getInput PROC

 0000008B			USERINPUT:
 0000008B  BA 0000012E R	    mov     edx, OFFSET messageGetNumber
 00000090  E8 00000000 E		call    WriteString
 00000095  E8 00000000 E		call    ReadInt                        ; Result is in EAX

					; Check input and return to start if it is out of range
 0000009A  83 F8 01			cmp     eax, 1
 0000009D  7C 0A			jl      INPUTINVALID
 0000009F  3B 05 0000020D R		cmp     eax, maxUserInput
 000000A5  7F 02			jg      INPUTINVALID

					; The input is valid
 000000A7  EB 16			jmp     INPUTVALID

 000000A9			INPUTINVALID:
					; The invalid number is in eax, print the error and return to the start of user input
 000000A9  E8 00000000 E	    call    WriteDec
 000000AE  BA 0000016E R		mov     edx, OFFSET messageRangeError
 000000B3  E8 00000000 E		call    WriteString
 000000B8  E8 00000000 E		call    CrLf
 000000BD  EB CC			jmp     GETINPUT
					
 000000BF			INPUTVALID:
 000000BF  C3				ret
 000000C0			getInput ENDP

				;--------------------------------------------------------
				;
				; Display the exit text for the application
				;
				;--------------------------------------------------------

 000000C0			displayExit PROC
				; Show goodbye
 000000C0  E8 00000000 E		call    CrLf
 000000C5  E8 00000000 E		call    CrLf
 000000CA  BA 0000018B R		mov     edx, OFFSET messageExit1
 000000CF  E8 00000000 E		call    WriteString
 000000D4  E8 00000000 E		call    CrLf
 000000D9  BA 000001B1 R		mov     edx, OFFSET messageExit2
 000000DE  E8 00000000 E		call    WriteString
 000000E3  E8 00000000 E		call    CrLf
 000000E8  BA 000001DD R		mov     edx, OFFSET messageExit3
 000000ED  E8 00000000 E		call    WriteString
 000000F2  BA 000001EB R		mov     edx, OFFSET storageName
 000000F7  E8 00000000 E		call    WriteString
 000000FC  BA 000001E7 R		mov     edx, OFFSET messageExit4
 00000101  E8 00000000 E		call    WriteString
 00000106  E8 00000000 E		call    CrLf
 0000010B  C3				ret
 0000010C			displayExit ENDP

				;--------------------------------------------------------
				;
				; Pause the output and wait for user input
				;
				;--------------------------------------------------------

 0000010C			PauseOutput PROC
 0000010C  E8 00000000 E		call CrLf
 00000111  E8 00000000 E		call WaitMsg
 00000116  E8 00000000 E		call CrLf
 0000011B  E8 00000000 E		call CrLf
 00000120  C3				ret
 00000121			PauseOutput ENDP

				;--------------------------------------------------------
				;
				; Display spaces based on the size of the number
				;
				;--------------------------------------------------------

 00000121			WriteColumnSpaces PROC
 00000121  BA 000001E9 R		mov     edx, OFFSET messageSpace

					;cmp     eax, 1000000
					;jge     COLUMNSPACE1
					;call    WriteString

				;COLUMNSPACE1:
 00000126  3D 000186A0			cmp     eax, 100000
 0000012B  7D 05			jge     COLUMNSPACE2
 0000012D  E8 00000000 E		call    WriteString

 00000132			COLUMNSPACE2:
 00000132  3D 00002710			cmp     eax, 10000
 00000137  7D 05			jge     COLUMNSPACE3
 00000139  E8 00000000 E		call    WriteString

 0000013E			COLUMNSPACE3:
 0000013E  3D 000003E8			cmp     eax, 1000
 00000143  7D 05			jge     COLUMNSPACE4
 00000145  E8 00000000 E		call    WriteString

 0000014A			COLUMNSPACE4:
 0000014A  83 F8 64			cmp     eax, 100
 0000014D  7D 05			jge     COLUMNSPACE5
 0000014F  E8 00000000 E		call    WriteString

 00000154			COLUMNSPACE5:
 00000154  83 F8 0A			cmp     eax, 10
 00000157  7D 05			jge     COLUMNSPACE6
 00000159  E8 00000000 E		call    WriteString

 0000015E			COLUMNSPACE6:
 0000015E  E8 00000000 E		call    WriteString
 00000163  C3				ret
 00000164			WriteColumnSpaces ENDP

				;--------------------------------------------------------
				;
				; Entry point for displaying composite numbers
				;
				;--------------------------------------------------------

 00000164			showComposites PROC
 00000164  8B C8			mov  ecx, eax ; Move the user value into the loop counter
 00000166  B8 00000002			mov  eax, 2

 0000016B			COMPOSITELOOP:
 0000016B  51				push ecx
 0000016C  E8 0000000B			call isComposite ; This function modifies ECX
 00000171  59				pop  ecx
 00000172  40				inc eax
 00000173  39 0D 00000216 R		cmp cNumbersFound, ecx
 00000179  75 F0			jne COMPOSITELOOP

 0000017B  C3				ret
 0000017C			showComposites ENDP

				;--------------------------------------------------------
				;
				; A function to print a single number as a composite
				;
				;--------------------------------------------------------

 0000017C			isComposite PROC
					; EAX contains the number to check as a composite
 0000017C  8B C8			mov    ecx, eax ; Setup loop counter
 0000017E  49				dec    ecx      ; We don't want to divide by it's self, so reduce count by one

 0000017F  8B D8			mov    ebx, eax ; EBX will contain the original number
 00000181			COMPOSITECHECKLOOP:
 00000181  83 F9 01			cmp   ecx, 1    ; 1 is not a composite number
 00000184  74 73			je    NOTCOMPOSITE

 00000186  8B C3			mov    eax, ebx ; Restore the original number into eax
 00000188  BA 00000000			mov    edx, 0   ; Clear edx
 0000018D  F7 F1			div    ecx      ; Divide by the loop counter
 0000018F  83 FA 00			cmp    edx, 0   ; If there is no remainder, then this is a composite number
 00000192  75 65			jne    NOTCOMPOSITE

 00000194  8B 15 00000216 R		mov    edx, cNumbersFound
 0000019A  42				inc    edx
 0000019B  89 15 00000216 R		mov    cNumbersFound, edx

 000001A1  8B C3			mov    eax, ebx ; Restore the original number into eax
 000001A3  E8 FFFFFF79			call   WriteColumnSpaces
 000001A8  E8 00000000 E		call   WriteDec

 000001AD  A1 00000211 R		mov    eax, columnNumber
 000001B2  40				inc    eax
 000001B3  A3 00000211 R		mov    columnNumber, eax

					; We have printed 10 numbers, so do a CrLf
 000001B8  83 F8 0A			cmp    eax, 10
 000001BB  75 39			jne    COMPOSITECOLUMN
 000001BD  C7 05 00000211 R		mov    columnNumber, 0
	   00000000
 000001C7  E8 00000000 E		call   CrLf

					; Pause the print out and display message if we have hit the console size
					
 000001CC  B8 00000000			mov    eax, 0
 000001D1  A0 00000215 R		mov    al, rowNumber
 000001D6  FE C0			inc    al
 000001D8  A2 00000215 R		mov    rowNumber, al
 000001DD  E8 00000000 E		call   GetMaxXY
 000001E2  38 35 00000215 R		cmp    rowNumber, dh
 000001E8  75 0C			jne    COMPOSITECOLUMN
					
 000001EA  C6 05 00000215 R		mov    rowNumber, 0
	   00
 000001F1  E8 FFFFFF16			call   PauseOutput

 000001F6			COMPOSITECOLUMN:

 000001F6  8B C3			mov    eax, ebx ; Restore the original number into eax
 000001F8  C3				ret             ; Exit the procedure now that we found the composite number

 000001F9			NOTCOMPOSITE:
 000001F9  E2 86			loop COMPOSITECHECKLOOP
 000001FB  8B C3			mov    eax, ebx ; Restore the original number into eax
 000001FD  C3				ret
 000001FE			isComposite ENDP

				;--------------------------------------------------------
				;
				; Program entry point
				;
				;--------------------------------------------------------

 000001FE			main PROC
					
 000001FE  E8 FFFFFDFD			call displayIntro
 00000203  E8 FFFFFE30			call getUsername
 00000208  E8 FFFFFE5F			call displayInstructions
 0000020D  E8 FFFFFE79			call getInput
 00000212  E8 FFFFFF4D			call showComposites

 00000217  E8 FFFFFEA4			call displayExit
					exit	; exit to operating system
 0000021C  6A 00	   *	    push   +000000000h
 0000021E  E8 00000000 E   *	    call   ExitProcess
 00000223			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/06/16 13:45:29
!Composite Numbers (Project04.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000021A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000223 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PauseOutput  . . . . . . . . . .	P Near	 0000010C _TEXT	Length= 00000015 Public STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColumnSpaces  . . . . . . .	P Near	 00000121 _TEXT	Length= 00000043 Public STDCALL
  COLUMNSPACE2 . . . . . . . . .	L Near	 00000132 _TEXT	
  COLUMNSPACE3 . . . . . . . . .	L Near	 0000013E _TEXT	
  COLUMNSPACE4 . . . . . . . . .	L Near	 0000014A _TEXT	
  COLUMNSPACE5 . . . . . . . . .	L Near	 00000154 _TEXT	
  COLUMNSPACE6 . . . . . . . . .	L Near	 0000015E _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayExit  . . . . . . . . . .	P Near	 000000C0 _TEXT	Length= 0000004C Public STDCALL
displayInstructions  . . . . . .	P Near	 0000006C _TEXT	Length= 0000001F Public STDCALL
displayIntro . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000038 Public STDCALL
getInput . . . . . . . . . . . .	P Near	 0000008B _TEXT	Length= 00000035 Public STDCALL
  USERINPUT  . . . . . . . . . .	L Near	 0000008B _TEXT	
  INPUTINVALID . . . . . . . . .	L Near	 000000A9 _TEXT	
  INPUTVALID . . . . . . . . . .	L Near	 000000BF _TEXT	
getUsername  . . . . . . . . . .	P Near	 00000038 _TEXT	Length= 00000034 Public STDCALL
isComposite  . . . . . . . . . .	P Near	 0000017C _TEXT	Length= 00000082 Public STDCALL
  COMPOSITECHECKLOOP . . . . . .	L Near	 00000181 _TEXT	
  COMPOSITECOLUMN  . . . . . . .	L Near	 000001F6 _TEXT	
  NOTCOMPOSITE . . . . . . . . .	L Near	 000001F9 _TEXT	
main . . . . . . . . . . . . . .	P Near	 000001FE _TEXT	Length= 00000025 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showComposites . . . . . . . . .	P Near	 00000164 _TEXT	Length= 00000018 Public STDCALL
  COMPOSITELOOP  . . . . . . . .	L Near	 0000016B _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cNumbersFound  . . . . . . . . .	DWord	 00000216 _DATA	
columnNumber . . . . . . . . . .	DWord	 00000211 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxUserInput . . . . . . . . . .	DWord	 0000020D _DATA	
messageEC1 . . . . . . . . . . .	Byte	 0000003D _DATA	
messageEC2 . . . . . . . . . . .	Byte	 0000005B _DATA	
messageEnterName . . . . . . . .	Byte	 0000009E _DATA	
messageExit1 . . . . . . . . . .	Byte	 0000018B _DATA	
messageExit2 . . . . . . . . . .	Byte	 000001B1 _DATA	
messageExit3 . . . . . . . . . .	Byte	 000001DD _DATA	
messageExit4 . . . . . . . . . .	Byte	 000001E7 _DATA	
messageGetNumber . . . . . . . .	Byte	 0000012E _DATA	
messageHello . . . . . . . . . .	Byte	 000000B2 _DATA	
messageInstruction1  . . . . . .	Byte	 000000BA _DATA	
messageInstruction2  . . . . . .	Byte	 000000F7 _DATA	
messageRangeError  . . . . . . .	Byte	 0000016E _DATA	
messageSpace . . . . . . . . . .	Byte	 000001E9 _DATA	
messageTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowNumber  . . . . . . . . . . .	Byte	 00000215 _DATA	
storageNameLength  . . . . . . .	DWord	 00000209 _DATA	
storageName  . . . . . . . . . .	Byte	 000001EB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
