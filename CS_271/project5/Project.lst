Microsoft (R) Macro Assembler Version 14.00.23918.0	    11/19/16 00:13:13
.Random Number Generator Sorter (Project05.asm		     Page 1 - 1


				TITLE Random Number Generator Sorter (Project05.asm)

				; Author: Jeremy Prater
				; Course / Project ID : CS-271 / Project 05                Date: 11/15/2016
				; Description:  Write a program to ask the user for the number of random numbers to generate
				;               Display the list of generated random numbers
				;               Sort the list of generated random numbers
				;               Display the median value
				;               Display the sorted list
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 20 20 20 20 20	messageTitle        BYTE  "       Random Number Generator Sorter         by       Jeremy Prater", 0
	   20 20 52 61 6E
	   64 6F 6D 20 4E
	   75 6D 62 65 72
	   20 47 65 6E 65
	   72 61 74 6F 72
	   20 53 6F 72 74
	   65 72 20 20 20
	   20 20 20 20 20
	   20 62 79 20 20
	   20 20 20 20 20
	   4A 65 72 65 6D
	   79 20 50 72 61
	   74 65 72 00
 00000045 2A 2A 20 45 43	messageEC1          BYTE  "** EC1: Align output columns." ,0
	   31 3A 20 41 6C
	   69 67 6E 20 6F
	   75 74 70 75 74
	   20 63 6F 6C 75
	   6D 6E 73 2E 00
 00000063 2A 2A 20 45 43	messageEC2          BYTE  "** EC2: Display more composites, but show them one page at a time.", 0
	   32 3A 20 44 69
	   73 70 6C 61 79
	   20 6D 6F 72 65
	   20 63 6F 6D 70
	   6F 73 69 74 65
	   73 2C 20 62 75
	   74 20 73 68 6F
	   77 20 74 68 65
	   6D 20 6F 6E 65
	   20 70 61 67 65
	   20 61 74 20 61
	   20 74 69 6D 65
	   2E 00

 000000A6 54 68 69 73 20	messageIntro1       BYTE  "This program generates random numbers in the range [100 .. 999],", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 2C 00
 000000E7 64 69 73 70 6C	messageIntro2       BYTE  "displays the original list, sorts the list, and calculates the", 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 00
 00000126 6D 65 64 69 61	messageIntro3       BYTE  "median value. Finally, it displays the list sorted in descending order.", 0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00

 0000016E 48 6F 77 20 6D	messageUserGetCount BYTE  "How many numbers should be generated? [10 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 000001A2 49 6E 76 61 6C	messageUserInvalid  BYTE  "Invalid input : ", 0
	   69 64 20 69 6E
	   70 75 74 20 3A
	   20 00
 000001B3 54 68 65 20 75	messageArrayUnsort  BYTE  "The unsorted random numbers:", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 00
 000001D0 54 68 65 20 6D	messageMedianVal    BYTE  "The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 000001DF 54 68 65 20 73	messageArraySort    BYTE  "The sorted list:", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 00

 = 0000000A			constantNumGenLow   EQU   10
 = 000000C8			constantNumGenHigh  EQU   200

 = 00000064			constantRandomMin   EQU   100
 = 000003E7			constantRandomMax   EQU   999

 000001F0 00000000		dataNumGen          DWORD ?
 000001F4			dataArray           DWORD (constantNumGenHigh) DUP (?)

 00000000			.code

				;--------------------------------------------------------
				;
				; PROCEDURE : displayIntro
				;             Display the introduction
				;
				; PARAMETERS : None
				;
				;--------------------------------------------------------

 00000000			displayIntro PROC
				; introduction
 00000000  BA 00000000 R		mov		edx, OFFSET messageTitle
 00000005  E8 00000000 E		call	WriteString
 0000000A  E8 00000000 E		call	CrLf
 0000000F  E8 00000000 E		call	CrLf

				; Display extra credit information
 00000014  BA 00000045 R		mov		edx, OFFSET messageEC1
 00000019  E8 00000000 E		call	WriteString
 0000001E  E8 00000000 E		call	CrLf
 00000023  BA 00000063 R		mov	edx, OFFSET messageEC2
 00000028  E8 00000000 E		call	WriteString
 0000002D  E8 00000000 E		call	CrLf
 00000032  E8 00000000 E		call	CrLf
 00000037  C3				ret
 00000038			displayIntro ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : displayInstructions
				;             Display the instructions for the application
				;
				; PARAMETERS : None
				;
				;--------------------------------------------------------

 00000038			displayInstructions PROC
					; Display instructions

 00000038  BA 000000A6 R	    mov     edx, OFFSET messageIntro1
 0000003D  E8 00000000 E		call    WriteString
 00000042  E8 00000000 E		call    CrLf

 00000047  BA 000000E7 R	    mov     edx, OFFSET messageIntro2
 0000004C  E8 00000000 E		call    WriteString
 00000051  E8 00000000 E		call    CrLf

 00000056  BA 00000126 R	    mov     edx, OFFSET messageIntro3
 0000005B  E8 00000000 E		call    WriteString
 00000060  E8 00000000 E		call    CrLf

 00000065  C3				ret
 00000066			displayInstructions ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : getData
				;             Get user input
				;
				; PARAMETERS : [EBP+8] (reference) dataNumGen - the number of items to generate
				;
				;--------------------------------------------------------

 00000066			getData PROC
 00000066  54				push    esp      ; Save stack pointer
 00000067  8B EC			mov     ebp, esp ; copy stack into base pointer

 00000069			USERINPUT:
 00000069  BA 0000016E R	    mov     edx, OFFSET messageUserGetCount
 0000006E  E8 00000000 E		call    WriteString
 00000073  E8 00000000 E		call    ReadInt                        ; Result is in EAX

					; Check input and return to start if it is out of range
 00000078  83 F8 0A			cmp     eax, constantNumGenLow
 0000007B  7C 09			jl      INPUTINVALID
 0000007D  3D 000000C8			cmp     eax, constantNumGenHigh
 00000082  7F 02			jg      INPUTINVALID

					; The input is valid, result is in eax
 00000084  EB 16			jmp     INPUTVALID

 00000086			INPUTINVALID:
					; The invalid number is in eax, print the error and return to the start of user input
 00000086  BA 000001A2 R		mov     edx, OFFSET messageUserInvalid
 0000008B  E8 00000000 E		call    WriteString
 00000090  E8 00000000 E	    call    WriteDec
 00000095  E8 00000000 E		call    CrLf
 0000009A  EB CD			jmp     USERINPUT
					
 0000009C			INPUTVALID:

 0000009C  8B 5D 08			mov ebx, [ebp + 8] ; Fetch the offset from the stack to store result in
 0000009F  89 03			mov [ebx], eax     ; offset is in EBX, store value into the memory pointed at by ebx
 000000A1  5D				pop ebp            ; Restore base pointer
 000000A2  C2 0004			ret 4              ; Discard parameters on the stack (1x DWORD)
 000000A5			getData ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : fillArray
				;             Fill the array with random numbers between [min .. max]
				;
				; PARAMETERS : [EBP + 12] (value)     dataNumGen - the number of items to generate
				;              [EBP +  8] (reference) dataArray  - the memory address of the start of the array
				;
				;--------------------------------------------------------

 000000A5			fillArray PROC
 000000A5  54				push    esp      ; Save stack pointer
 000000A6  8B EC			mov     ebp, esp ; copy stack into base pointer

 000000A8  8B 4D 0C			mov     ecx, [ebp +	12] ; The loop counter
 000000AB  8B 55 08			mov     edx, [ebp +  8] ; Array memory location
 000000AE  BB 00000000			mov     ebx, 0
 000000B3  E8 00000000 E		call    Randomize

 000000B8			FILLLOOP:
 000000B8  B8 00000383			mov     eax, (constantRandomMax - constantRandomMin)   ; Setup the max range of the random number as max-min (min will be added later)
 000000BD  E8 00000000 E		call    RandomRange                                    ; Get a random number
 000000C2  83 C0 64			add     eax, constantRandomMin                         ; Add the minimum random value to the result
 000000C5  89 04 13			mov     [edx + ebx], eax                               ; Copy the random value into the array at position [ebx]
 000000C8  83 C3 04			add     ebx, 4                                         ; Move the the next array element (memory stride is 4 bytes - dword)
 000000CB  E2 EB			loop    FILLLOOP

 000000CD  5D				pop     ebp            ; Restore base pointer
 000000CE  C2 0008			ret     8              ; Discard parameters on the stack (2x DWORD)
 000000D1			fillArray ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : displayList
				;             Print the array of data
				;
				; PARAMETERS : [EBP + 16] (reference) dataArray  - the memory address of the start of the array
				;              [EBP + 12] (value)     dataNumGen - the number of items to generate
				;              [EBP +  8] (reference) tableTitle - the title of the table to print
				;
				;--------------------------------------------------------

 000000D1			displayList PROC
 000000D1  54				push    esp      ; Save stack pointer
 000000D2  8B EC			mov     ebp, esp ; copy stack into base pointer

 000000D4  E8 00000000 E		call    CrLf
 000000D9  8B 55 08			mov     edx, [ebp + 8]
 000000DC  E8 00000000 E		call    WriteString
 000000E1  E8 00000000 E		call    CrLf
 000000E6  E8 00000000 E		call    CrLf

 000000EB  8B 4D 0C			mov     ecx, [ebp + 12]   ; number counter
 000000EE  BB 00000000			mov     ebx, 0            ; column counter
 000000F3  BA 00000000			mov     edx, 0            ; array index counter
 000000F8			LOOPPRINT:
 000000F8  8B 45 10			mov     eax, [ebp + 16]   ; Get the base of the array
 000000FB  8B 04 02			mov     eax, [eax + edx]  ; Get the next array data
 000000FE  E8 00000000 E		call    WriteDec
 00000103  B8 00000020			mov     eax, 32           ; Get the character for ' '
 00000108  E8 00000000 E		call    WriteChar
 0000010D  E8 00000000 E		call    WriteChar
 00000112  83 C2 04			add     edx, 4            ; Go to the next array offset
 00000115  43				inc     ebx               ; Increase the column counter
 00000116  83 FB 0A			cmp     ebx, 10           ; Check for the end of the row
 00000119  75 0A			jne     SKIPCRLF

 0000011B  E8 00000000 E		call    CrLf              ; New line
 00000120  BB 00000000			mov     ebx, 0            ; Reset the column counter

 00000125			SKIPCRLF:
 00000125  E2 D1			loop LOOPPRINT

 00000127  5D				pop     ebp            ; Restore base pointer
 00000128  C2 000C			ret     12             ; Discard parameters on the stack (3x DWORD)
 0000012B			displayList ENDP

					;--------------------------------------------------------
				;
				; PROCEDURE : displayMedian
				;             Display the median of the values.
				;             If the size is even, then average the two middle values
				;
				; PARAMETERS : [EBP + 12] (value)     dataNumGen - the number of items to generate
				;              [EBP +  8] (reference) dataArray  - the memory address of the start of the array
				;
				;--------------------------------------------------------
 0000012B			displayMedian PROC
 0000012B  54				push    esp      ; Save stack pointer
 0000012C  8B EC			mov     ebp, esp ; copy stack into base pointer

 0000012E  8B 45 0C			mov     eax, [ebp + 12]
 00000131  8B D8			mov     ebx, eax
 00000133  83 E3 01			and     ebx, 1
 00000136  83 FB 01			cmp     ebx, 1

 00000139  74 32			je     ODD

					; The count of the array is is even
					; Get the two middle numbers, sum, divide by 2 and leave in EAX
					; EAX contains the count
 0000013B  BA 00000000			mov     edx ,0
 00000140  BB 00000002			mov     ebx, 2
 00000145  F7 F3			div     ebx
 00000147  8B D8			mov     ebx, eax
 00000149  4B				dec     ebx
 0000014A  8B 4D 08			mov     ecx, [ebp + 8]
 0000014D  8B D1			mov     edx, ecx
 0000014F  6B C0 04			imul    eax, 4
 00000152  6B DB 04			imul    ebx, 4
 00000155  03 C8			add     ecx, eax
 00000157  03 D3			add     edx, ebx
 00000159  8B 01			mov     eax, [ecx]
 0000015B  8B 1A			mov     ebx, [edx]
 0000015D  03 C3			add     eax, ebx
 0000015F  BA 00000000			mov     edx, 0
 00000164  BB 00000002			mov     ebx, 2
 00000169  F7 F3			div     ebx
 0000016B  EB 16			jmp     FINISHED

 0000016D			ODD:
					; The count of the array is odd
					; Divide the count by 2, add 1, get the data at that index
					; Leave data in EAX
 0000016D  BA 00000000			mov     edx ,0
 00000172  BB 00000002			mov     ebx, 2
 00000177  F7 F3			div     ebx
 00000179  8B 4D 08			mov     ecx, [ebp + 8]
 0000017C  6B C0 04			imul    eax, 4
 0000017F  03 C8			add     ecx, eax
 00000181  8B 01			mov     eax, [ecx]

 00000183			FINISHED:
 00000183  E8 00000000 E		call    WriteDec

 00000188  5D				pop     ebp            ; Restore base pointer
 00000189  C2 0008			ret     8              ; Discard parameters on the stack (2x DWORD)
 0000018C			displayMedian ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : sortList
				;             Sort the array of data
				;
				; PARAMETERS : [EBP + 12] (value)     dataNumGen - the number of items to generate
				;              [EBP +  8] (reference) dataArray  - the memory address of the start of the array
				;
				;--------------------------------------------------------
				;for(a=0; a<request-1; a++) {
				;	b = a;
				;	for(c=a+1; c<request; c++) {
				;		if(array[c] > array[b])
				;		b = c;
				;	}
				;	exchange(array[a], array[b]);
				;}

 0000018C			sortList PROC
 0000018C  54				push    esp      ; Save stack pointer
 0000018D  8B EC			mov     ebp, esp ; copy stack into base pointer

 0000018F  B8 00000000			mov     eax, 0
 00000194			OUTERLOOP:
 00000194  8B D8			mov     ebx, eax

 00000196  8B C8			mov     ecx, eax
 00000198  41				inc     ecx
 00000199			INNERLOOP:
					; Compare array [a] to [b]

					; EAX will be the new [a]
					; EBX will be the new [b]
					; ECX is a memory offset counter
 00000199  50				push    eax
 0000019A  53				push    ebx
 0000019B  51				push    ecx

 0000019C  8B C1			mov     eax, ecx
 0000019E  6B C0 04			imul    eax, 4
 000001A1  8B 4D 08			mov     ecx, [ebp + 8]
 000001A4  03 C8			add     ecx, eax
 000001A6  8B 09			mov     ecx, [ecx]

 000001A8  8B C3			mov     eax, ebx
 000001AA  6B C0 04			imul    eax, 4
 000001AD  8B 5D 08			mov     ebx, [ebp + 8]
 000001B0  03 D8			add     ebx, eax
 000001B2  8B 1B			mov     ebx, [ebx]

 000001B4  3B CB			cmp     ecx, ebx

					; Restore eax, ebx, ecx
 000001B6  59				pop    ecx
 000001B7  5B				pop    ebx
 000001B8  58				pop    eax

 000001B9  7E 02			jle    NOMATCH
 000001BB  8B D9			mov    ebx, ecx

					; Setup the stack to swap the data elements [a] and [b]
 000001BD			NOMATCH:


 000001BD  41				inc     ecx             ; End of inner loop
 000001BE  8B 55 0C			mov     edx, [ebp + 12] ; Set EDX to the number of random numbers
 000001C1  3B CA			cmp     ecx, edx
 000001C3  7C D4			jl      INNERLOOP

					; Exchange the item identified by the inner loop
 000001C5  50				push    eax
 000001C6  53				push    ebx
 000001C7  51				push    ecx
 000001C8  55				push    ebp ; Push EBP because we are calling swap, which will distrupt EBP

 000001C9  8B C8			mov     ecx, eax
 000001CB  6B C9 04			imul    ecx, 4
 000001CE  8B 45 08			mov     eax, [ebp + 8]
 000001D1  03 C1			add     eax, ecx

 000001D3  8B CB			mov     ecx, ebx
 000001D5  6B C9 04			imul    ecx, 4
 000001D8  8B 5D 08			mov     ebx, [ebp + 8]
 000001DB  03 D9			add     ebx, ecx

 000001DD  50				push    eax
 000001DE  53				push    ebx
 000001DF  E8 00000011			call    swapData

 000001E4  5D				pop     ebp
 000001E5  59				pop     ecx
 000001E6  5B				pop     ebx
 000001E7  58				pop     eax

 000001E8  40				inc     eax             ; End of outer loop
 000001E9  8B 55 0C			mov     edx, [ebp + 12] ; Set EDX to the number of random numbers
 000001EC  4A				dec     edx             ; EDX Minus 1
 000001ED  3B C2			cmp     eax, edx
 000001EF  7C A3			jl      OUTERLOOP

 000001F1  5D				pop     ebp            ; Restore base pointer
 000001F2  C2 0008			ret     8              ; Discard parameters on the stack (2x DWORD)
 000001F5			sortList ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : swapData
				;             Swap elements of the array
				;
				; PARAMETERS : [EBP + 12] (reference) dataArray1 - the first number to swap
				;              [EBP +  8] (reference) dataArray2 - the second number to swap
				;
				;--------------------------------------------------------

 000001F5			swapData PROC
 000001F5  54				push    esp      ; Save stack pointer
 000001F6  8B EC			mov     ebp, esp ; copy stack into base pointer

 000001F8  50				push    eax ; Save all registers
 000001F9  53				push    ebx
 000001FA  51				push    ecx
 000001FB  52				push    edx

 000001FC  8B 4D 08			mov     ecx, [ebp +  8] ; Get the memory offsets of the two items to swap
 000001FF  8B 55 0C			mov     edx, [ebp + 12]

 00000202  8B 01			mov     eax, [ecx] ; Cache the two values to swap in eax/ebx
 00000204  8B 1A			mov     ebx, [edx]

 00000206  89 19			mov     [ecx], ebx ; Restore the cached values into the opposite memory addresses
 00000208  89 02			mov     [edx], eax

 0000020A  5A				pop     edx ; Restore all registers
 0000020B  59				pop     ecx
 0000020C  5B				pop     ebx
 0000020D  58				pop     eax

 0000020E  5D				pop     ebp            ; Restore base pointer
 0000020F  C2 0008			ret     8              ; Discard parameters on the stack (2x DWORD)
 00000212			swapData ENDP


				;--------------------------------------------------------
				;
				; Program entry point
				;
				;--------------------------------------------------------

 00000212			main PROC
					
 00000212  E8 FFFFFDE9			call displayIntro
 00000217  E8 FFFFFE1C			call displayInstructions

					; Get user data
 0000021C  68 000001F0 R		push OFFSET dataNumGen ; Parameter 1 - offset of memory to store result
 00000221  E8 FFFFFE40			call getData

					; Fill Array
 00000226  FF 35 000001F0 R		push dataNumGen        ; Parameter 1 - number of random numbers to generate
 0000022C  68 000001F4 R		push OFFSET dataArray  ; Parameter 2 - offset of memory to store result (array)
 00000231  E8 FFFFFE6F			call fillArray

					; Display the unsorted array
 00000236  68 000001F4 R		push OFFSET dataArray          ; Parameter 1 - offset of memory to store result (array)
 0000023B  FF 35 000001F0 R		push dataNumGen                ; Parameter 2 - number of random numbers to print
 00000241  68 000001B3 R		push OFFSET messageArrayUnsort ; Parameter 3 - title for the table
 00000246  E8 FFFFFE86			call displayList
					
					; Sort array
 0000024B  FF 35 000001F0 R		push dataNumGen                ; Parameter 1 - number of random numbers to sort
 00000251  68 000001F4 R		push OFFSET dataArray          ; Parameter 2 - offset of memory to store result (array)
 00000256  E8 FFFFFF31			call sortList

					; Display Median
 0000025B  BA 000001D0 R		mov  edx, OFFSET messageMedianVal
 00000260  E8 00000000 E		call CrLf
 00000265  E8 00000000 E		call CrLf
 0000026A  E8 00000000 E		call WriteString
 0000026F  FF 35 000001F0 R		push dataNumGen                ; Parameter 1 - number of random numbers to sort
 00000275  68 000001F4 R		push OFFSET dataArray          ; Parameter 2 - offset of memory to store result (array)
 0000027A  E8 FFFFFEAC			call displayMedian
 0000027F  E8 00000000 E		call CrLf
 00000284  E8 00000000 E		call CrLf

					; Display the unsorted array
 00000289  68 000001F4 R		push OFFSET dataArray          ; Parameter 1 - offset of memory to store result (array)
 0000028E  FF 35 000001F0 R		push dataNumGen                ; Parameter 2 - number of random numbers to print
 00000294  68 000001DF R		push OFFSET messageArraySort   ; Parameter 3 - title for the table
 00000299  E8 FFFFFE33			call displayList


					exit	; exit to operating system
 0000029E  6A 00	   *	    push   +000000000h
 000002A0  E8 00000000 E   *	    call   ExitProcess
 000002A5			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.23918.0	    11/19/16 00:13:13
.Random Number Generator Sorter (Project05.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000514 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002A5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayInstructions  . . . . . .	P Near	 00000038 _TEXT	Length= 0000002E Public STDCALL
displayIntro . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000038 Public STDCALL
displayList  . . . . . . . . . .	P Near	 000000D1 _TEXT	Length= 0000005A Public STDCALL
  LOOPPRINT  . . . . . . . . . .	L Near	 000000F8 _TEXT	
  SKIPCRLF . . . . . . . . . . .	L Near	 00000125 _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000012B _TEXT	Length= 00000061 Public STDCALL
  ODD  . . . . . . . . . . . . .	L Near	 0000016D _TEXT	
  FINISHED . . . . . . . . . . .	L Near	 00000183 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 000000A5 _TEXT	Length= 0000002C Public STDCALL
  FILLLOOP . . . . . . . . . . .	L Near	 000000B8 _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000066 _TEXT	Length= 0000003F Public STDCALL
  USERINPUT  . . . . . . . . . .	L Near	 00000069 _TEXT	
  INPUTINVALID . . . . . . . . .	L Near	 00000086 _TEXT	
  INPUTVALID . . . . . . . . . .	L Near	 0000009C _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 00000093 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 0000018C _TEXT	Length= 00000069 Public STDCALL
  OUTERLOOP  . . . . . . . . . .	L Near	 00000194 _TEXT	
  INNERLOOP  . . . . . . . . . .	L Near	 00000199 _TEXT	
  NOMATCH  . . . . . . . . . . .	L Near	 000001BD _TEXT	
swapData . . . . . . . . . . . .	P Near	 000001F5 _TEXT	Length= 0000001D Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
constantNumGenHigh . . . . . . .	Number	 000000C8h   
constantNumGenLow  . . . . . . .	Number	 0000000Ah   
constantRandomMax  . . . . . . .	Number	 000003E7h   
constantRandomMin  . . . . . . .	Number	 00000064h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dataArray  . . . . . . . . . . .	DWord	 000001F4 _DATA	
dataNumGen . . . . . . . . . . .	DWord	 000001F0 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
messageArraySort . . . . . . . .	Byte	 000001DF _DATA	
messageArrayUnsort . . . . . . .	Byte	 000001B3 _DATA	
messageEC1 . . . . . . . . . . .	Byte	 00000045 _DATA	
messageEC2 . . . . . . . . . . .	Byte	 00000063 _DATA	
messageIntro1  . . . . . . . . .	Byte	 000000A6 _DATA	
messageIntro2  . . . . . . . . .	Byte	 000000E7 _DATA	
messageIntro3  . . . . . . . . .	Byte	 00000126 _DATA	
messageMedianVal . . . . . . . .	Byte	 000001D0 _DATA	
messageTitle . . . . . . . . . .	Byte	 00000000 _DATA	
messageUserGetCount  . . . . . .	Byte	 0000016E _DATA	
messageUserInvalid . . . . . . .	Byte	 000001A2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
