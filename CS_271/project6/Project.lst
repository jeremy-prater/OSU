Microsoft (R) Macro Assembler Version 14.00.23918.0	    12/04/16 10:42:03
Low Level IO (Project06.asm				     Page 1 - 1


				TITLE Low Level IO (Project06.asm)

				; Author: Jeremy Prater
				; Course / Project ID : CS-271 / Project 06                Date: 11/30/2016
				; Description:  
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 20 20 20 20 20	messageTitle        BYTE  "       Low-level I/O Proc and Macro      by       Jeremy Prater", 0
	   20 20 4C 6F 77
	   2D 6C 65 76 65
	   6C 20 49 2F 4F
	   20 50 72 6F 63
	   20 61 6E 64 20
	   4D 61 63 72 6F
	   20 20 20 20 20
	   20 62 79 20 20
	   20 20 20 20 20
	   4A 65 72 65 6D
	   79 20 50 72 61
	   74 65 72 00
 00000040 20 2D 2D 20 4E	messageEC1          BYTE  " -- NO EC this week. Getting ready for the holidays." ,0
	   4F 20 45 43 20
	   74 68 69 73 20
	   77 65 65 6B 2E
	   20 47 65 74 74
	   69 6E 67 20 72
	   65 61 64 79 20
	   66 6F 72 20 74
	   68 65 20 68 6F
	   6C 69 64 61 79
	   73 2E 00

 00000075 50 6C 65 61 73	messageIntro1       BYTE  "Please enter 10 unsigned integers", 0
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 75 6E 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 73 00
 00000097 50 6C 65 61 73	messageIntro2       BYTE  "Please enter numbers less than max uint32.", 0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 6C 65 73 73
	   20 74 68 61 6E
	   20 6D 61 78 20
	   75 69 6E 74 33
	   32 2E 00
 000000C2 4F 6E 63 65 20	messageIntro3       BYTE  "Once all numbers are entered, the sum and average will be displayed.", 0
	   61 6C 6C 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   20 65 6E 74 65
	   72 65 64 2C 20
	   74 68 65 20 73
	   75 6D 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   77 69 6C 6C 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 2E 00

 00000107 50 6C 65 61 73	messageUserGetCount BYTE  "Please enter a 32 bit unsigned integer : ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   33 32 20 62 69
	   74 20 75 6E 73
	   69 67 6E 65 64
	   20 69 6E 74 65
	   67 65 72 20 3A
	   20 00
 00000131 45 52 52 4F 52	messageUserInvalid  BYTE  "ERROR : Invalid number.", 0
	   20 3A 20 49 6E
	   76 61 6C 69 64
	   20 6E 75 6D 62
	   65 72 2E 00
 00000149 59 6F 75 20 65	messageNumberArray  BYTE  "You entered the following numbers:", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 00
 0000016C 2C 20 00		messageNumberSep    BYTE  ", ", 0
 0000016F 54 68 65 20 73	messageNumberSum    BYTE  "The sum of the numbers is : ", 0
	   75 6D 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   20 3A 20 00
 0000018C 54 68 65 20 61	messageNumberAvg    BYTE  "The average of the numbers is : ", 0
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 20
	   3A 20 00
 000001AD 54 68 61 6E 6B	messsageGoodBye     BYTE  "Thanks for playing!", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00

 000001C1  00000020 [		userString          BYTE  (32) DUP (?)
	    00
	   ]
 000001E1  0000000A [		userData            DWORD (10) DUP (?)
	    00000000
	   ]
 00000209 00000000		userSum             DWORD 0

 00000000			.code

				;--------------------------------------------------------
				;
				; MACRO : getString
				;         Read a string from the user input
				;
				; PARAMETERS : memory address to store number
				;
				;--------------------------------------------------------

				getString MACRO buffer
					push ecx
					push edx
					mov  edx, OFFSET buffer
					mov  ecx, (SIZEOF buffer)-1
					call ReadString
					pop  edx
					pop  ecx
				ENDM

				;--------------------------------------------------------
				;
				; MACRO : displayString
				;         Write a string to the console
				;
				; PARAMETERS : OFFSET mem - memory address of the string to write
				;              BOOL (0/1) - Print CrLf
				;
				;--------------------------------------------------------

				displayString MACRO buffer, eol
					LOCAL NOCRLF

					push edx
					mov  edx, OFFSET buffer
					call WriteString
					push eax
					mov  eax, eol
					cmp  eax, 0
					je   NOCRLF
					call CrLf
				NOCRLF:
					pop  eax
					pop  edx
				ENDM

				;--------------------------------------------------------
				;
				; PROCEDURE : displayIntro
				;             Display the introduction
				;
				; PARAMETERS : None
				;
				;--------------------------------------------------------

 00000000			displayIntro PROC
				; introduction
					displayString  messageTitle, 1
 00000000  52		     1		push edx
 00000001  BA 00000000 R     1		mov  edx, OFFSET messageTitle
 00000006  E8 00000000 E     1		call WriteString
 0000000B  50		     1		push eax
 0000000C  B8 00000001	     1		mov  eax, 1
 00000011  83 F8 00	     1		cmp  eax, 0
 00000014  74 05	     1		je   ??0000
 00000016  E8 00000000 E     1		call CrLf
 0000001B		     1	??0000:
 0000001B  58		     1		pop  eax
 0000001C  5A		     1		pop  edx
 0000001D  E8 00000000 E		call	CrLf

				; Display extra credit information
					displayString messageEC1, 1
 00000022  52		     1		push edx
 00000023  BA 00000040 R     1		mov  edx, OFFSET messageEC1
 00000028  E8 00000000 E     1		call WriteString
 0000002D  50		     1		push eax
 0000002E  B8 00000001	     1		mov  eax, 1
 00000033  83 F8 00	     1		cmp  eax, 0
 00000036  74 05	     1		je   ??0001
 00000038  E8 00000000 E     1		call CrLf
 0000003D		     1	??0001:
 0000003D  58		     1		pop  eax
 0000003E  5A		     1		pop  edx
 0000003F  E8 00000000 E		call	CrLf
 00000044  C3				ret
 00000045			displayIntro ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : displayInstructions
				;             Display the instructions for the application
				;
				; PARAMETERS : None
				;
				;--------------------------------------------------------

 00000045			displayInstructions PROC
					; Display instructions
				    displayString messageIntro1, 1
 00000045  52		     1		push edx
 00000046  BA 00000075 R     1		mov  edx, OFFSET messageIntro1
 0000004B  E8 00000000 E     1		call WriteString
 00000050  50		     1		push eax
 00000051  B8 00000001	     1		mov  eax, 1
 00000056  83 F8 00	     1		cmp  eax, 0
 00000059  74 05	     1		je   ??0002
 0000005B  E8 00000000 E     1		call CrLf
 00000060		     1	??0002:
 00000060  58		     1		pop  eax
 00000061  5A		     1		pop  edx
				    displayString messageIntro2, 1
 00000062  52		     1		push edx
 00000063  BA 00000097 R     1		mov  edx, OFFSET messageIntro2
 00000068  E8 00000000 E     1		call WriteString
 0000006D  50		     1		push eax
 0000006E  B8 00000001	     1		mov  eax, 1
 00000073  83 F8 00	     1		cmp  eax, 0
 00000076  74 05	     1		je   ??0003
 00000078  E8 00000000 E     1		call CrLf
 0000007D		     1	??0003:
 0000007D  58		     1		pop  eax
 0000007E  5A		     1		pop  edx
				    displayString messageIntro3, 1
 0000007F  52		     1		push edx
 00000080  BA 000000C2 R     1		mov  edx, OFFSET messageIntro3
 00000085  E8 00000000 E     1		call WriteString
 0000008A  50		     1		push eax
 0000008B  B8 00000001	     1		mov  eax, 1
 00000090  83 F8 00	     1		cmp  eax, 0
 00000093  74 05	     1		je   ??0004
 00000095  E8 00000000 E     1		call CrLf
 0000009A		     1	??0004:
 0000009A  58		     1		pop  eax
 0000009B  5A		     1		pop  edx
 0000009C  C3				ret
 0000009D			displayInstructions ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : ReadVal
				;             Read unsigned integer from input into register
				;
				; -- Uses getString Macro to get input string
				; PARAMETERS : Memory address to store converted string integer
				;
				;--------------------------------------------------------

 0000009D			ReadVal PROC
 0000009D  54				push    esp      ; Save stack pointer
 0000009E  8B EC			mov     ebp, esp ; copy stack into base pointer
 000000A0  50				push    eax
 000000A1  53				push    ebx
 000000A2  51				push    ecx
 000000A3  52				push    edx

 000000A4			START:
					displayString messageUserGetCount ,0
 000000A4  52		     1		push edx
 000000A5  BA 00000107 R     1		mov  edx, OFFSET messageUserGetCount
 000000AA  E8 00000000 E     1		call WriteString
 000000AF  50		     1		push eax
 000000B0  B8 00000000	     1		mov  eax, 0
 000000B5  83 F8 00	     1		cmp  eax, 0
 000000B8  74 05	     1		je   ??0005
 000000BA  E8 00000000 E     1		call CrLf
 000000BF		     1	??0005:
 000000BF  58		     1		pop  eax
 000000C0  5A		     1		pop  edx
					getString     userString
 000000C1  51		     1		push ecx
 000000C2  52		     1		push edx
 000000C3  BA 000001C1 R     1		mov  edx, OFFSET userString
 000000C8  B9 0000001F	     1		mov  ecx, (SIZEOF userString)-1
 000000CD  E8 00000000 E     1		call ReadString
 000000D2  5A		     1		pop  edx
 000000D3  59		     1		pop  ecx
					; EAX contains string length

 000000D4  83 F8 0B			cmp    eax, 11
 000000D7  7F 55			jg     INPUTFAIL
 000000D9  8B C8		    mov    ecx, eax
 000000DB  BE 000001C1 R		mov    esi, OFFSET userString
 000000E0  8B 55 08			mov    edx, [ebp+8]
 000000E3  B8 00000000			mov    eax, 0
 000000E8  89 02			mov    [edx], eax
					

 000000EA			PROCESSINPUT:
 000000EA  B8 00000000			mov    eax, 0
 000000EF  AC				lodsb
 000000F0  83 E8 30			sub    eax, 30h
 000000F3  83 F8 0A			cmp    eax, 10
 000000F6  73 36			jae    INPUTFAIL
					; eax contains the decimal number at the current 10's position defined by ecx

					; Setup and multiply current number by the base-10 position
 000000F8  51				push   ecx
 000000F9  50				push   eax
 000000FA  B8 00000001			mov    eax, 1
 000000FF  BB 0000000A			mov    ebx, 10
 00000104  49				dec    ecx ; Decrease the 10's place by 1
 00000105  83 F9 00			cmp    ecx, 0 ; Check if it is the last place
 00000108  74 04			je     TENMULDONE
 0000010A			TENMUL:
 0000010A  F7 E3			mul    ebx
 0000010C  E2 FC			loop   TENMUL
 0000010ETENMULDONE:
 0000010E  8B D8			mov    ebx, eax
 00000110  58				pop    eax
 00000111  59				pop    ecx
					; The base-10 multiplier is in ebx (1,10,100,1000,etc...)
 00000112  F7 E3			mul    ebx
 00000114  72 18			JC INPUTFAIL
 00000116  70 16			JO INPUTFAIL

					; Copy new value into memory
 00000118  8B 55 08			mov    edx, [ebp+8]
 0000011B  8B 12			mov    edx, [edx]
 0000011D  03 D0			add    edx, eax
 0000011F  72 0D			JC INPUTFAIL
 00000121  70 0B			JO INPUTFAIL
 00000123  51				push   ecx
 00000124  8B 4D 08			mov    ecx, [ebp+8]
 00000127  89 11			mov    [ecx], edx
 00000129  59				pop    ecx
					
 0000012A  E2 BE			loop   PROCESSINPUT	
 0000012C  EB 22			jmp    INPUTPASS

 0000012E			INPUTFAIL:
					displayString messageUserInvalid, 1
 0000012E  52		     1		push edx
 0000012F  BA 00000131 R     1		mov  edx, OFFSET messageUserInvalid
 00000134  E8 00000000 E     1		call WriteString
 00000139  50		     1		push eax
 0000013A  B8 00000001	     1		mov  eax, 1
 0000013F  83 F8 00	     1		cmp  eax, 0
 00000142  74 05	     1		je   ??0006
 00000144  E8 00000000 E     1		call CrLf
 00000149		     1	??0006:
 00000149  58		     1		pop  eax
 0000014A  5A		     1		pop  edx
 0000014B  E9 FFFFFF54			jmp    START

 00000150			INPUTPASS:
 00000150  5A				pop    edx
 00000151  59				pop    ecx
 00000152  5B				pop    ebx
 00000153  58				pop    eax
 00000154  5C				pop    esp
 00000155  C2 0004			ret    4 ; Discard stack storage
 00000158			ReadVal ENDP

				;--------------------------------------------------------
				;
				; PROCEDURE : WriteVal
				;             Write unsigned integer from register to output
				;
				; -- Uses displayString Macro to output the value
				; PARAMETERS : None
				;
				;--------------------------------------------------------

 00000158			WriteVal PROC
 00000158  54				push    esp      ; Save stack pointer
 00000159  8B EC			mov     ebp, esp ; copy stack into base pointer
 0000015B  50				push    eax
 0000015C  53				push    ebx
 0000015D  51				push    ecx
 0000015E  52				push    edx
 0000015F  83 EC 04			sub     esp, 4
 00000162  C6 45 FC 00			mov     BYTE PTR [ebp - 4], 0

 00000166			START:
 00000166  BF 000001C1 R		mov    edi, OFFSET userString
 0000016B  BA 00000000			mov    edx, 0
 00000170  B9 0000000A			mov    ecx, 10
 00000175  8B 45 08			mov    eax, [ebp+8]
 00000178  8B 00			mov    eax, [eax]

 0000017A			DIVIDETENS:

					; Setup and multiply current number by the base-10 position
 0000017A  51				push   ecx
 0000017B  50				push   eax
 0000017C  B8 00000001			mov    eax, 1
 00000181  BB 0000000A			mov    ebx, 10
 00000186  49				dec    ecx ; Decrease the 10's place by 1
 00000187  83 F9 00			cmp    ecx, 0 ; Check if it is the last place
 0000018A  74 04			je     TENMULDONE
 0000018C			TENMUL:
 0000018C  F7 E3			mul    ebx
 0000018E  E2 FC			loop   TENMUL
 00000190			TENMULDONE:
 00000190  8B D8			mov    ebx, eax
 00000192  58				pop    eax
 00000193  59				pop    ecx
					; The base-10 multiplier is in ebx (1,10,100,1000,etc...)
 00000194  50				push   eax
 00000195  BA 00000000			mov    edx, 0
 0000019A  F7 F3			div    ebx

 0000019C  80 7D FC 00			cmp    BYTE PTR [ebp - 4], 0
 000001A0  75 09			jne    STOREDATA
 000001A2  83 F8 00			cmp    eax, 0
 000001A5  74 11			je     SKIPZERO
 000001A7  C6 45 FC 01			mov    BYTE PTR [ebp - 4], 1

 000001AB			STOREDATA:
 000001AB  83 C0 30			add    eax, 30h
 000001AE  AA				stosb
 000001AF  83 E8 30			sub    eax, 30h
 000001B2  F7 E3			mul    ebx
 000001B4  8B D8			mov    ebx, eax	
 000001B6  EB 05			jmp    CONTINUEZERO

 000001B8			SKIPZERO:
 000001B8  BB 00000000			mov    ebx, 0

 000001BD			CONTINUEZERO:
 000001BD  58				pop    eax
 000001BE  2B C3			sub    eax, ebx
 000001C0  E2 B8			loop   DIVIDETENS

					; Check if we ever stored any data (the number could be zero)
 000001C2  80 7D FC 00			cmp    BYTE PTR [ebp - 4], 0
 000001C6  75 06			jne    DATAVALID
					; Add a zero
 000001C8  B8 00000030			mov    eax, 30h
 000001CD  AA				stosb

 000001CE			DATAVALID:
					; Add trailing null
 000001CE  B8 00000000			mov    eax, 00h
 000001D3  AA				stosb
					displayString userString, 0
 000001D4  52		     1		push edx
 000001D5  BA 000001C1 R     1		mov  edx, OFFSET userString
 000001DA  E8 00000000 E     1		call WriteString
 000001DF  50		     1		push eax
 000001E0  B8 00000000	     1		mov  eax, 0
 000001E5  83 F8 00	     1		cmp  eax, 0
 000001E8  74 05	     1		je   ??0007
 000001EA  E8 00000000 E     1		call CrLf
 000001EF		     1	??0007:
 000001EF  58		     1		pop  eax
 000001F0  5A		     1		pop  edx
 000001F1  58				pop    eax
 000001F2  5A				pop    edx
 000001F3  59				pop    ecx
 000001F4  5B				pop    ebx
 000001F5  58				pop    eax
 000001F6  5C				pop    esp
 000001F7  C2 0004			ret    4 ; Discard stack storage
 000001FA			WriteVal ENDP

				;--------------------------------------------------------
				;
				; Program entry point
				;
				;--------------------------------------------------------

 000001FA			main PROC
					
 000001FA  E8 FFFFFE01			call displayIntro
 000001FF  E8 FFFFFE41			call displayInstructions
 00000204  B9 0000000A			mov  ecx, 10

 00000209			GETUSERDATA:
					; Setup array position into eax
 00000209  8B C1			mov  eax, ecx
 0000020B  48				dec  eax
 0000020C  6B C0 04			imul eax, 4
 0000020F  05 000001E1 R		add  eax, OFFSET userData
					; Call read value to populate userData
 00000214  50				push eax
 00000215  E8 FFFFFE83			call ReadVal
 0000021A  E2 ED			loop GETUSERDATA

 0000021C  E8 00000000 E		call CrLf
					displayString messageNumberArray, 1
 00000221  52		     1		push edx
 00000222  BA 00000149 R     1		mov  edx, OFFSET messageNumberArray
 00000227  E8 00000000 E     1		call WriteString
 0000022C  50		     1		push eax
 0000022D  B8 00000001	     1		mov  eax, 1
 00000232  83 F8 00	     1		cmp  eax, 0
 00000235  74 05	     1		je   ??0008
 00000237  E8 00000000 E     1		call CrLf
 0000023C		     1	??0008:
 0000023C  58		     1		pop  eax
 0000023D  5A		     1		pop  edx

 0000023E  B9 0000000A			mov  ecx, 10
 00000243			PRINTUSERDATA:
					; Setup array position into eax
 00000243  8B C1			mov  eax, ecx
 00000245  48				dec  eax
 00000246  6B C0 04			imul eax, 4
 00000249  05 000001E1 R		add  eax, OFFSET userData
					; Call read value to populate userData
 0000024E  50				push eax
 0000024F  E8 FFFFFF04			call WriteVal

 00000254  83 F9 01			cmp  ecx, 1
 00000257  74 1D			je NOCOMMA

					displayString messageNumberSep, 0
 00000259  52		     1		push edx
 0000025A  BA 0000016C R     1		mov  edx, OFFSET messageNumberSep
 0000025F  E8 00000000 E     1		call WriteString
 00000264  50		     1		push eax
 00000265  B8 00000000	     1		mov  eax, 0
 0000026A  83 F8 00	     1		cmp  eax, 0
 0000026D  74 05	     1		je   ??0009
 0000026F  E8 00000000 E     1		call CrLf
 00000274		     1	??0009:
 00000274  58		     1		pop  eax
 00000275  5A		     1		pop  edx

 00000276			NOCOMMA:
 00000276  43				inc  ebx
 00000277  E2 CA			loop PRINTUSERDATA

 00000279  E8 00000000 E		call CrLf

					; Print sum of numbers
 0000027E  B9 0000000A			mov  ecx, 10
 00000283  BB 00000000			mov  ebx, 0
 00000288			SUMUSERDATA:
					; Setup array position into eax
 00000288  8B C1			mov  eax, ecx
 0000028A  48				dec  eax
 0000028B  6B C0 04			imul eax, 4
 0000028E  05 000001E1 R		add  eax, OFFSET userData
 00000293  8B 00			mov  eax, [eax]
 00000295  03 D8			add  ebx, eax
 00000297  E2 EF			loop SUMUSERDATA
 00000299  B9 00000209 R		mov  ecx, OFFSET userSum
 0000029E  89 19			mov  [ecx], ebx

 000002A0  E8 00000000 E		call CrLf
					displayString messageNumberSum, 0
 000002A5  52		     1		push edx
 000002A6  BA 0000016F R     1		mov  edx, OFFSET messageNumberSum
 000002AB  E8 00000000 E     1		call WriteString
 000002B0  50		     1		push eax
 000002B1  B8 00000000	     1		mov  eax, 0
 000002B6  83 F8 00	     1		cmp  eax, 0
 000002B9  74 05	     1		je   ??000A
 000002BB  E8 00000000 E     1		call CrLf
 000002C0		     1	??000A:
 000002C0  58		     1		pop  eax
 000002C1  5A		     1		pop  edx
 000002C2  51				push ecx
 000002C3  E8 FFFFFE90			call WriteVal
 000002C8  E8 00000000 E		call CrLf

 000002CD  B9 00000209 R		mov  ecx, OFFSET userSum
 000002D2  8B 01			mov  eax, [ecx]
 000002D4  BA 00000000			mov  edx, 0
 000002D9  BB 0000000A			mov  ebx, 10
 000002DE  F7 F3			div  ebx
 000002E0  B9 00000209 R		mov  ecx, OFFSET userSum
 000002E5  89 01			mov  [ecx], eax

					; Print division average
					displayString messageNumberAvg, 0
 000002E7  52		     1		push edx
 000002E8  BA 0000018C R     1		mov  edx, OFFSET messageNumberAvg
 000002ED  E8 00000000 E     1		call WriteString
 000002F2  50		     1		push eax
 000002F3  B8 00000000	     1		mov  eax, 0
 000002F8  83 F8 00	     1		cmp  eax, 0
 000002FB  74 05	     1		je   ??000B
 000002FD  E8 00000000 E     1		call CrLf
 00000302		     1	??000B:
 00000302  58		     1		pop  eax
 00000303  5A		     1		pop  edx
 00000304  51				push ecx
 00000305  E8 FFFFFE4E			call WriteVal
 0000030A  E8 00000000 E		call CrLf
 0000030F  E8 00000000 E		call CrLf

					displayString messsageGoodBye, 1
 00000314  52		     1		push edx
 00000315  BA 000001AD R     1		mov  edx, OFFSET messsageGoodBye
 0000031A  E8 00000000 E     1		call WriteString
 0000031F  50		     1		push eax
 00000320  B8 00000001	     1		mov  eax, 1
 00000325  83 F8 00	     1		cmp  eax, 0
 00000328  74 05	     1		je   ??000C
 0000032A  E8 00000000 E     1		call CrLf
 0000032F		     1	??000C:
 0000032F  58		     1		pop  eax
 00000330  5A		     1		pop  edx

					exit	; exit to operating system
 00000331  6A 00	   *	    push   +000000000h
 00000333  E8 00000000 E   *	    call   ExitProcess
 00000338			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.23918.0	    12/04/16 10:42:03
Low Level IO (Project06.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000020D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000338 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000009D _TEXT	Length= 000000BB Public STDCALL
  START  . . . . . . . . . . . .	L Near	 000000A4 _TEXT	
  ??0005 . . . . . . . . . . . .	L Near	 000000BF _TEXT	
  PROCESSINPUT . . . . . . . . .	L Near	 000000EA _TEXT	
  TENMUL . . . . . . . . . . . .	L Near	 0000010A _TEXT	
  TENMULDONE . . . . . . . . . .	L Near	 0000010E _TEXT	
  INPUTFAIL  . . . . . . . . . .	L Near	 0000012E _TEXT	
  ??0006 . . . . . . . . . . . .	L Near	 00000149 _TEXT	
  INPUTPASS  . . . . . . . . . .	L Near	 00000150 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000158 _TEXT	Length= 000000A2 Public STDCALL
  START  . . . . . . . . . . . .	L Near	 00000166 _TEXT	
  DIVIDETENS . . . . . . . . . .	L Near	 0000017A _TEXT	
  TENMUL . . . . . . . . . . . .	L Near	 0000018C _TEXT	
  TENMULDONE . . . . . . . . . .	L Near	 00000190 _TEXT	
  STOREDATA  . . . . . . . . . .	L Near	 000001AB _TEXT	
  SKIPZERO . . . . . . . . . . .	L Near	 000001B8 _TEXT	
  CONTINUEZERO . . . . . . . . .	L Near	 000001BD _TEXT	
  DATAVALID  . . . . . . . . . .	L Near	 000001CE _TEXT	
  ??0007 . . . . . . . . . . . .	L Near	 000001EF _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayInstructions  . . . . . .	P Near	 00000045 _TEXT	Length= 00000058 Public STDCALL
  ??0002 . . . . . . . . . . . .	L Near	 00000060 _TEXT	
  ??0003 . . . . . . . . . . . .	L Near	 0000007D _TEXT	
  ??0004 . . . . . . . . . . . .	L Near	 0000009A _TEXT	
displayIntro . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000045 Public STDCALL
  ??0000 . . . . . . . . . . . .	L Near	 0000001B _TEXT	
  ??0001 . . . . . . . . . . . .	L Near	 0000003D _TEXT	
main . . . . . . . . . . . . . .	P Near	 000001FA _TEXT	Length= 0000013E Public STDCALL
  GETUSERDATA  . . . . . . . . .	L Near	 00000209 _TEXT	
  ??0008 . . . . . . . . . . . .	L Near	 0000023C _TEXT	
  PRINTUSERDATA  . . . . . . . .	L Near	 00000243 _TEXT	
  ??0009 . . . . . . . . . . . .	L Near	 00000274 _TEXT	
  NOCOMMA  . . . . . . . . . . .	L Near	 00000276 _TEXT	
  SUMUSERDATA  . . . . . . . . .	L Near	 00000288 _TEXT	
  ??000A . . . . . . . . . . . .	L Near	 000002C0 _TEXT	
  ??000B . . . . . . . . . . . .	L Near	 00000302 _TEXT	
  ??000C . . . . . . . . . . . .	L Near	 0000032F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
messageEC1 . . . . . . . . . . .	Byte	 00000040 _DATA	
messageIntro1  . . . . . . . . .	Byte	 00000075 _DATA	
messageIntro2  . . . . . . . . .	Byte	 00000097 _DATA	
messageIntro3  . . . . . . . . .	Byte	 000000C2 _DATA	
messageNumberArray . . . . . . .	Byte	 00000149 _DATA	
messageNumberAvg . . . . . . . .	Byte	 0000018C _DATA	
messageNumberSep . . . . . . . .	Byte	 0000016C _DATA	
messageNumberSum . . . . . . . .	Byte	 0000016F _DATA	
messageTitle . . . . . . . . . .	Byte	 00000000 _DATA	
messageUserGetCount  . . . . . .	Byte	 00000107 _DATA	
messageUserInvalid . . . . . . .	Byte	 00000131 _DATA	
messsageGoodBye  . . . . . . . .	Byte	 000001AD _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userData . . . . . . . . . . . .	DWord	 000001E1 _DATA	
userString . . . . . . . . . . .	Byte	 000001C1 _DATA	
userSum  . . . . . . . . . . . .	DWord	 00000209 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
