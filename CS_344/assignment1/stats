#!/bin/bash

set -eE

################ Input data goes here
inputbuffer=inputdata$$
declare -A inputBuffer
x=0
y=0


################ It's a trap
trap cleanup INT HUP QUIT TERM KILL ERR

function cleanup {
    echo 'Cleaning up temporary files'
    rm -f $inputbuffer
}

function roundNumber {
    echo $(( ( $1 + ( $2 / 2 ) ) / $2 ))
}

function calcMedian {
    read -a data <<< `echo $1 | tr " " "\n" | sort -n | tr "\n" " "`
    if [ $(( $2 % 2 )) -eq 0 ] ; then
        echo "its oddddd"
    else
        echo ${data[$(( $2 / 2 ))]}
    fi
}

function processRows {
    echo -e "Average\tMedian"
    for ly in `seq 0 $y`
    do
        sum=0
        median=""
        for lx in `seq 0 $x`
        do
            sum=$(( $sum + ${inputBuffer[$lx,$ly]} ))
            median="$median ${inputBuffer[$lx,$ly]}"
        done
        lx=$(( lx + 1 ))
        printf "$(roundNumber ${sum} ${lx})"
        printf "\t"
        printf "$(calcMedian "${median}" ${lx})"
        printf "\n"
    done
}

function processCols {
    echo "Processing Rows"
}

function getInput {
    if [ $1 ] ; then
        cat $1 > $inputbuffer
    else
        stdinread
    fi
}

function stdinread {
    cat > $inputbuffer
}

function readInput {
    while read -r -a buffer
    do
        x=0
        for element in "${buffer[@]}"
        do
            inputBuffer[$x,$y]=$element
            x=$(( x + 1 ))
        done
    y=$(( y + 1 ))
    done <<< `cat $inputbuffer`
    x=$(( x - 1 ))
    y=$(( y - 1 ))
}

function usage {
    echo "stats - CS 344 (Jeremy Prater)"
    echo "Usage:"
    echo "stats {-rows|-cols} [input_file]"
    cleanup
    exit -1
}

echo "Debug mode -----------------------------------------"
echo "temp file: $inputbuffer"
echo "----------------------------------------------------"

if [ $3 ] ; then
    usage
fi

getInput $2

readInput "$inputbuffer"

if [[ $1 == -r* ]] ; then
    processRows
elif [[ $1 == -c* ]] ; then
    processCols
else
    usage
fi

cleanup